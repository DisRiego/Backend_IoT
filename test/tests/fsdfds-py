# Test para asignar un dispositivo a un lote
@pytest.mark.asyncio
async def test_assign_device_to_lot(db_session: Session):
    db, devices_ids = db_session

    # Verificar que el estado activo existe (ID 15)
    status = db.query(Vars).filter(Vars.id == 15).first()
    if not status:
        status = Vars(id=15, name="Activo", type="status")
        db.add(status)
        db.commit()
        db.refresh(status)

    # Crear el dispositivo inicialmente
    device_data = {
        "serial_number": 123456789,  # Serial específico para prueba
        "model": "DeviceTestModel",
        "lot_id": None,  # Inicialmente sin lote
        "installation_date": datetime.utcnow().isoformat(),  # Convertir a formato de cadena
        "maintenance_interval_id": 1,  # Asignar un valor ficticio para evitar dependencias
        "estimated_maintenance_date": (datetime.utcnow() + timedelta(days=365)).isoformat(),  # Convertir a formato de cadena
        "status": status.id,
        "devices_id": 1,  # Asignamos un tipo de dispositivo básico
        "price_device": {"price": 2500},
        "data_devices": {"sensor_data": 75}
    }

    # Intentar crearlo y verificar que se lanza un error 201
    response = client.post("/devices/", json=device_data)
    assert response.status_code == 201
    assert response.json()["success"] is True
    assert response.json()["data"]["title"] == "Dispositivo creado"
    assert response.json()["data"]["message"] == "El dispositivo ha sido creado correctamente"

    # Almacenar el id del dispositivo creado
    created_device_id = response.json()["data"]["device"]["id"]
    devices_ids.append(created_device_id)

    # Asignar el dispositivo al lote
    lot_id = 2  # Lote específico de la prueba
    assignment_data = {
        "device_id": created_device_id,
        "lot_id": lot_id,
        "installation_date": datetime.utcnow().isoformat(),
        "maintenance_interval_id": 1,  # Usar el mismo valor ficticio para el intervalo de mantenimiento
        "property_id": 1  # Suponiendo que el predio tiene ID 1
    }

    response = client.post("/devices/assign", json=assignment_data)

    # Aquí el dispositivo no está inhabilitado, por lo que debe asignarse correctamente
    assert response.status_code == 200
    assert response.json()["success"] is True
    assert response.json()["data"]["title"] == "Asignación exitosa"
    assert response.json()["data"]["message"] == "El dispositivo ha sido asignado al lote correctamente"

    # Verificar que el dispositivo ha sido asignado al lote
    device = db.query(DeviceIot).filter(DeviceIot.id == created_device_id).first()
    assert device.lot_id == lot_id  # Verificar que el lote se asignó correctamente
    #